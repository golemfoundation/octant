variables:
  KANIKO_VERSION: v1.16.0
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fast"
  TRANSFER_METER_FREQUENCY: "2s"
  MASTER_BRANCH: "master"
  IMAGE_TAG: $CI_COMMIT_SHA
  SECRET_WORDS: test test test test test test test test test test test junk

stages:
  - build
  - lint_and_typecheck
  - test
  - docker
  - deploy
  - application
  - env_test
  - status
  - cleanup

default:
  tags:
    - metal
  interruptible: true

.images:
  python:
    name: registry.gitlab.com/golemfoundation/devops/container-builder/octant/python-poetry-ext:42c80766
    pull_policy: if-not-present
  node:
    name: registry.gitlab.com/golemfoundation/devops/container-builder/octant/node-extended:5dc8b447
    pull_policy: if-not-present
  kaniko:
    name: gcr.io/kaniko-project/executor:$KANIKO_VERSION-debug
    pull_policy: if-not-present
    entrypoint: [""]
  git_improved:
    name: registry.gitlab.com/golemfoundation/devops/container-builder/gitops-builder:2ea6d57c
    pull_policy: if-not-present
  synpress:
    name: registry.gitlab.com/golemfoundation/devops/container-builder/octant/synpress-arch:5dc8b447
    pull_policy: if-not-present
  alpine_git:
    name: alpine/git
    pull_policy: if-not-present
    entrypoint: [""]

.rules:
  on_mr:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  on_push_to_default_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  on_push_to_default_branch_manual:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  on_push_to_master_branch:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $MASTER_BRANCH
  on_push_to_master_branch_manual:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $MASTER_BRANCH
      when: manual
      allow_failure: true
  on_mr_manual:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
  on_version_tag:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

.scripts:
  yarn_install:
    - yarn install --cache-folder .yarn --non-interactive --frozen-lockfile
  poetry_install:
    - poetry config virtualenvs.in-project true
    - poetry install
  jq_install:
    - curl -sSfL https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64 -o/usr/local/bin/jq
    - chmod +x /usr/local/bin/jq

Build backend:
  stage: build
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - ci/build_backend.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: push
      paths:
        - backend/.venv

Build contracts:
  stage: build
  image: !reference [.images, node ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - ci/build_contracts_v1.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
    - key: $CI_COMMIT_REF_SLUG-yarn-contracts
      paths:
        - contracts-v1/.yarn
        - contracts-v1/node_modules
  artifacts:
    name: contracts
    paths:
      - contracts-v1/artifacts
      - contracts-v1/typechain
    expire_in: 3 days

Build services:
  stage: build
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  dependencies:
    - Build contracts
  needs:
    - Build contracts
  script:
    - ci/build_$SERVICE.sh
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules

Lint and typecheck yarn:
  stage: lint_and_typecheck
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn eslint
    - yarn type-check
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Lint and typecheck poetry:
  stage: lint_and_typecheck
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd backend
    - !reference [ .scripts, poetry_install ]
    - poetry run black --check --extend-exclude .venv .
    - poetry run flake8
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend-lint
      paths:
        - backend/.venv
      policy: pull

Backend tests:
  stage: test
  image: !reference [.images, python ]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  dependencies:
    - Build backend
  script:
    - cd backend
    - !reference [ .scripts, poetry_install ]
    - poetry run pytest
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: pull
      paths:
        - backend/.venv

Unit tests:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - client
          - coin-prices-server
          - subgraph
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn test
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull

Documentation:
  stage: test
  image: !reference [.images, node ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - cd $SERVICE
    - !reference [ .scripts, yarn_install ]
    - yarn docs
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      paths:
        - node_modules
        - .yarn
      policy: pull
    - key: $CI_COMMIT_REF_SLUG-yarn-$SERVICE
      paths:
        - $SERVICE/.yarn
        - $SERVICE/node-modules
      policy: pull
  artifacts:
    name: $SERVICE_docs
    paths:
      - $SERVICE/.docs/
    expire_in: 3 days

Build images:
  stage: docker
  image: !reference [ .images, kaniko ]
  rules:
    - !reference [ .rules, on_mr ]
    - !reference [ .rules, on_push_to_default_branch ]
    - !reference [ .rules, on_push_to_master_branch ]
    - !reference [ .rules, on_version_tag ]
  parallel:
    matrix:
      - SERVICE:
          - contracts-v1
          - coin-prices-server
          - client
          - subgraph
          - backend
  variables:
    IMAGE_NAME: $SERVICE
    GOOGLE_APPLICATION_CREDENTIALS: /kaniko/config.json
  script:
    - echo $KANIKO_CACHE_CONFIG > /kaniko/.docker/config.json
    - echo "$GCP_REGISTRY_PUSHER_SERVICE_ACCOUNT" | base64 -d > /kaniko/config.json
    - chmod 400 /kaniko/config.json
    - /kaniko/executor
      --context "$CI_PROJECT_DIR/$SERVICE"
      --dockerfile "$CI_PROJECT_DIR/ci/Dockerfile.$SERVICE"
      --destination "${GCP_DOCKER_IMAGE_REGISTRY}/$IMAGE_NAME:$IMAGE_TAG"
      --build-arg VERSION_TAG=$CI_COMMIT_SHORT_SHA
      --cache=true
      --cache-repo=$KANIKO_CACHE_REPO
      --insecure-pull

.env_resolve: &env_resolve_init
  before_script:
    - set -ex
    - source $CI_PROJECT_DIR/ci/argocd/resolve_env.sh $ENV_TYPE

.deploy_anvil:
  stage: deploy
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  resource_group: gitops
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh create
  environment:
    action: start

.deploy_app:
  stage: application
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  resource_group: gitops
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh update

.deploy_anvil_contracts:
  stage: application
  image:
    name: ${GCP_DOCKER_IMAGE_REGISTRY}/contracts-v1:${IMAGE_TAG}
    entrypoint: [""]
  <<: *env_resolve_init
  artifacts:
    reports:
      dotenv: build.env
  variables:
    NETWORK: 'localhost'
    SKIP_LOCAL_SUBGRAPH_UPDATE: 'true'
    PROPOSALS_ADDRESSES: '0x1c01595f9534E33d411035AE99a4317faeC4f6Fe,0x02Cb3C150BEdca124d0aE8CcCb72fefbe705c953,0x6e8873085530406995170Da467010565968C7C62,0x7DAC9Fc15C1Db4379D75A6E3f330aE849dFfcE18,0xAb6D6a37c5110d1377832c451C33e4fA16A9BA05,0xcC7d34C76A9d08aa0109F7Bae35f29C1CE35355A,0xD165df4296C85e780509fa1eace0150d945d49Fd,0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6,0xF6CBDd6Ea6EC3C4359e33de0Ac823701Cc56C6c4,0x0B7246eF74Ca7b37Fdc3D15be4f0b49876622F95,0x2DCDF80f439843D7E0aD1fEF9E7a439B7917eAc9,0x4A9a27d614a74Ee5524909cA27bdBcBB7eD3b315,0x8c89a6bf53cCF63e7B4465Cc1b1330723B4BdcB7,0x78e084445C3F1006617e1f36794dd2261ecE4AE3,0x15c941a44a343B8c46a28F2BB9aFc7a54E255A4f,0x3455FbB4D34C6b47999B66c83aA7BD8FDDade638,0x9531C059098e3d194fF87FebB587aB07B30B1306,0xd1B8dB70Ded72dB850713b2ce7e1A4FfAfAD95d1,0x0cbF31Ef6545EE30f47651D1A991Bf0aeB03DF29,0x87fEEd6162CB7dFe6B62F64366742349bF4D1B05,0x576edCed7475D8F64a5e2D5227c93Ca57d7f5d20,0xB476Ee7D610DAe7B23B671EBC7Bd6112E9772969,0xE2f413190Bb5D6AAcB4A056F1B5E1fD5B8141045,0xe126b3E5d052f1F575828f61fEBA4f4f2603652a'
    PROPOSALS_CID: Qmds9N5y2vkMuPTD6M4EBxNXnf3bjTDmzWBGnCkQGsMMGe
    DECISION_WINDOW: 1209600 # 14 days
    EPOCH_DURATION: 7776000 # 90 days
    FORWARD_FIRST_EPOCH: 'false'
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
    - export EPOCHS_START=$(date +%s)
    - export LOCAL_RPC_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_rpc_url.sh)
    - /app/entrypoint.sh $NETWORK $CI_PROJECT_DIR/build.env

Run E2E App:
  extends:
    - .deploy_anvil
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"
  environment:
    name: e2e/$CI_PIPELINE_IID
    url: https://mr-$CI_MERGE_REQUEST_IID-e2e-$CI_PIPELINE_ID-client.octant.wildland.dev
    deployment_tier: development
    on_stop: Destroy E2E App
    auto_stop_in: 6 hours

Run API Test App:
  extends:
    - .deploy_anvil
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "apitest"
    ANVIL_BLOCK_TIME: "0"
  environment:
    name: apitest/$CI_PIPELINE_IID
    deployment_tier: development
    on_stop: Destroy API Test App
    auto_stop_in: 2 hours

Run MR App:
  extends:
    - .deploy_anvil
  rules:
    - !reference [.rules, on_mr_manual ]
  variables:
    ENV_TYPE: "mr"
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    url: https://mr-$CI_MERGE_REQUEST_IID-client.octant.wildland.dev
    deployment_tier: development
    on_stop: Destroy MR App

E2E contracts:
  extends:
    - .deploy_anvil_contracts
  needs: ["Run E2E App"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"
    FORWARD_FIRST_EPOCH: 'true'

API Test contracts:
  extends:
    - .deploy_anvil_contracts
  needs: ["Run API Test App"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "apitest"

MR contracts:
  extends:
    - .deploy_anvil_contracts
  needs: ["Run MR App"]
  rules:
    - !reference [.rules, on_mr ]
  variables:
    ENV_TYPE: "mr"

E2E app deploy:
  extends:
    - .deploy_app
  needs: ["E2E contracts"]
  dependencies: ["E2E contracts"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "e2e"
    NETWORK_NAME: "local"
    NETWORK_ID: "1337"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

API Test app deploy:
  extends:
    - .deploy_app
  needs: ["API Test contracts"]
  dependencies: ["API Test contracts"]
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  variables:
    ENV_TYPE: "apitest"
    NETWORK_NAME: "local"
    NETWORK_ID: "1337"
    SNAPSHOTTER_ENABLED: "false"
    SCHEDULER_ENABLED: "false"
    BACKEND_SERVER_PGSQL: "false"
    WEB_CLIENT_REPLICAS: "0"
    COIN_PRICES_SERVER_REPLICAS: "0"
    BACKEND_SERVER_REPLICAS: "0"
    ANVIL_BLOCK_TIME: "0"

MR app deploy:
  extends:
    - .deploy_app
  needs: ["MR contracts"]
  dependencies: ["MR contracts"]
  rules:
    - !reference [.rules, on_mr ]
  variables:
    ENV_TYPE: "mr"
    NETWORK_NAME: "local"
    NETWORK_ID: "1337"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

Run UAT App:
  stage: deploy
  extends:
    - .deploy_app
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  variables:
    ENV_TYPE: "uat"
    NETWORK_NAME: "sepolia"
    NETWORK_ID: "11155111"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

Run Master App:
  stage: deploy
  extends:
    - .deploy_app
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  variables:
    ENV_TYPE: "master"
    NETWORK_NAME: "sepolia"
    NETWORK_ID: "11155111"
    SNAPSHOTTER_ENABLED: "true"
    SCHEDULER_ENABLED: "true"
    GLM_CLAIM_ENABLED: "true"
    VAULT_CONFIRM_WITHDRAWALS_ENABLED: "true"

Wait for MR:
  stage: status
  needs: ["MR app deploy"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "mr"

Wait for UAT:
  stage: status
  needs: ["Run UAT App"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "uat"

Wait for Master:
  stage: status
  needs: ["Run Master App"]
  image: !reference [.images, git_improved ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
  variables:
    ENV_TYPE: "master"

.destroy_app:
  stage: cleanup
  image: !reference [.images, git_improved ]
  resource_group: gitops
  <<: *env_resolve_init
  script:
    - set -ex
    - bash $CI_PROJECT_DIR/ci/argocd/application.sh destroy
  environment:
    action: stop

Destroy E2E App:
  extends:
    - .destroy_app
  needs: ["Run E2E App"]
  variables:
    ENV_TYPE: "e2e"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  environment:
    name: e2e/$CI_PIPELINE_IID
    deployment_tier: development

Destroy API Test App:
  extends:
    - .destroy_app
  needs: ["Run API Test App"]
  variables:
    ENV_TYPE: "apitest"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  environment:
    name: apitest/$CI_PIPELINE_IID
    deployment_tier: development

Destroy MR App:
  extends:
    - .destroy_app
  needs: ["Run MR App"]
  variables:
    ENV_TYPE: "mr"
  rules:
    - !reference [.rules, on_mr_manual ]
  environment:
    name: mr/$CI_MERGE_REQUEST_IID
    deployment_tier: development

Destroy UAT App:
  extends:
    - .destroy_app
  variables:
    ENV_TYPE: "uat"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  needs: []
  environment:
    name: persistent/uat
    deployment_tier: testing

Destroy Master App:
  extends:
    - .destroy_app
  variables:
    ENV_TYPE: "master"
  rules:
    - !reference [.rules, on_mr_manual ]
    - !reference [.rules, on_push_to_default_branch_manual ]
    - !reference [.rules, on_push_to_master_branch_manual ]
  needs: []
  environment:
    name: persistent/master
    deployment_tier: testing

API Tests:
  stage: application
  needs: ["API Test app deploy", "API Test contracts"]
  image: !reference [.images, python ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr ]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  dependencies:
    - API Test contracts
  script:
    - set -e
    - cd backend
    - !reference [ .scripts, poetry_install ]
    # Wait for Argo app
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
    - export ETH_RPC_PROVIDER_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_rpc_url.sh)
    - export SUBGRAPH_ENDPOINT=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_graph_url.sh)/subgraphs/name/octant
    # Run the API tests
    - set +e
    - poetry run pytest --onlyapi || PYTEST_EXIT_CODE=$?
    - set -e
    # Trigger the stop job
    - |
      JOB_ID=$(curl --fail -s -XGET --header "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs | jq '.[] | select(.name == "Destroy API Test App") | .id')

      curl -s --fail -X POST \
           -H "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$JOB_ID/play"
    - exit $PYTEST_EXIT_CODE
  variables:
    ENV_TYPE: "apitest"
    CHAIN_ID: "1337"
    CHAIN_NAME: "localhost"
    OCTANT_BACKEND_SECRET_KEY: "some-random-key"
    OCTANT_ENV: "production"
  cache:
    - key: $CI_COMMIT_REF_SLUG-poetry-backend
      policy: pull
      paths:
        - backend/.venv

E2E Epoch 2:
  stage: application
  needs: ["E2E app deploy"]
  image: !reference [.images, synpress ]
  <<: *env_resolve_init
  rules:
    - !reference [.rules, on_mr]
    - !reference [.rules, on_push_to_default_branch ]
    - !reference [.rules, on_push_to_master_branch ]
  artifacts:
    when: on_failure
    name: cypress
    paths:
      - client/cypress/videos
      - client/cypress/screenshots
    expire_in: 3 days
  cache:
    - key: $CI_COMMIT_REF_SLUG-yarn-client
      policy: pull
      paths:
        - client/.yarn
        - client/node-modules
    - key: $CI_COMMIT_REF_SLUG-yarn-root
      policy: pull
      paths:
        - node_modules
        - .yarn
  script:
    - set -e
    # Setup NVM to use Node version 16
    - source /usr/share/nvm/init-nvm.sh
    - nvm use 16
    - npm i -g yarn
    - cd client
    - yarn install --cache-folder .yarn --frozen-lockfile --prefer-offline --no-audit
    # Wait for the E2E app to become ready
    - bash $CI_PROJECT_DIR/ci/argocd/wait_for_app.sh
    - export OCTANT_BASE_URL=https://$(bash $CI_PROJECT_DIR/ci/argocd/get_web_client_url.sh)
    - set +e
    - yarn synpress:run || CY_EXIT_CODE=$?
    - if [[ "$CY_EXIT_CODE" == "0" ]]; then rm -r $CI_PROJECT_DIR/client/cypress/videos $CI_PROJECT_DIR/client/cypress/screenshots; fi
    - set -e
    # Trigger the stop job
    - |
      JOB_ID=$(curl --fail -s -XGET --header "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs | jq '.[] | select(.name == "Destroy E2E App") | .id')

      curl -s --fail -X POST \
           -H "PRIVATE-TOKEN: $CI_JOB_CONTROLLER" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$JOB_ID/play"
    - exit $CY_EXIT_CODE
  variables:
    ENV_TYPE: "e2e"
    CYPRESS_DOCKER_RUN: "true"
    CI: "true"
    METAMASK_VERSION: "10.25.0"

Deploy Release Candidate app:
  stage: deploy
  image: !reference [.images, alpine_git]
  rules:
    - !reference [.rules, on_push_to_master_branch_manual]
  resource_group: production
  variables:
    ARGO_REPOSITORY: "https://wildland-bot:${HOUSEKEEPER_CI_TOKEN}@gitlab.com/golemfoundation/devops/iac/k8s/wildland-k8s-devops.git"
    ARGO_REPOSITORY_BRANCH: "gitlab/octant-testing"
  script: |
    set -ex
    apk add gpg-agent yq
    gpg --import <(echo $HOUSEKEEPER_GPG_KEY | base64 -d)
    git config --global user.name "Wildland Housekeeper"
    git config --global user.email "$HOUSEKEEPER_EMAIL"
    git config --global user.signingkey $HOUSEKEEPER_GPG_KEY_ID

    GIT_DIR=`mktemp -d`
    git clone -b $ARGO_REPOSITORY_BRANCH $ARGO_REPOSITORY $GIT_DIR

    cd $GIT_DIR

    echo '(debug) before update ==='
    cat mainnet/octant-image.values.yaml
    cat testnet/octant-image.values.yaml
    echo '(end debug) ==='

    yq -i -e ".[].value.value = \"$IMAGE_TAG\"" mainnet/octant-image.values.yaml
    yq -i -e ".[].value.value = \"$IMAGE_TAG\"" testnet/octant-image.values.yaml

    echo '(debug) after update ==='
    cat mainnet/octant-image.values.yaml
    cat testnet/octant-image.values.yaml
    echo '(end debug) ==='

    git add mainnet/octant-image.values.yaml
    git add testnet/octant-image.values.yaml
    git commit -S -m "Changed octant image tag to $IMAGE_TAG at $(date +%Y-%m-%d)" || true

    git push
  environment:
    name: persistent/prod
    url: https://client.testnet.octant.wildland.dev

Deploy production app:
  stage: deploy
  rules:
    - !reference [.rules, on_version_tag]
  variables:
    DEV_IMAGE_TAG: $CI_COMMIT_SHA
    PROD_IMAGE_TAG: $CI_COMMIT_TAG
  trigger:
    project: golemfoundation/devops/pipelines/octant-production
    branch: master
