type Locked @entity(immutable: true) {
    id: Bytes!
    depositBefore: BigInt!
    amount: BigInt!
    user: Bytes! # address
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type Unlocked @entity(immutable: true) {
    id: Bytes!
    depositBefore: BigInt!
    amount: BigInt!
    user: Bytes! # address
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type Withdrawal @entity(immutable: true) {
    id: Bytes!
    amount: BigInt!
    epoch: Int!
    user: Bytes! # address
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type VaultMerkleRoot @entity(immutable: true) {
    id: Bytes!
    epoch: Int!
    root: Bytes!
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type LockedSummaryLatest @entity {
    id: String!
    glmSupply: BigInt!
    lockedTotal: BigInt!
    lockedRatio: BigDecimal!
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type LockedSummarySnapshot @entity(immutable: true) {
    id: Bytes!
    glmSupply: BigInt!
    lockedTotal: BigInt!
    lockedRatio: BigDecimal!
    blockNumber: Int!
    timestamp: Int!
    transactionHash: Bytes!
}

type Epoch @entity(immutable: true) {
    id: Bytes!
    epoch: Int!
    duration: BigInt!
    decisionWindow: BigInt!
    fromTs: BigInt!
    toTs: BigInt!
}

type ProjectsMetadataPerEpoch @entity {
    id: Bytes!
    epoch: Int!
    proposalsCid: String!
    projectsAddresses: [Bytes!]! # list of projects' addresses
}

type ProjectsMetadataAccumulated @entity {
    id: Bytes!
    projectsAddresses: [Bytes!]! # list of ALL projects' addresses
}