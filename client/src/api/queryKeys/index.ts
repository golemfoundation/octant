import { Root, QueryKeys } from './types';

export const ROOTS: Root = {
  antisybilStatus: 'antisybilStatus',
  calculateRewards: 'calculateRewards',
  cryptoValues: 'cryptoValues',
  depositAt: 'depositAt',
  epochAllocations: 'epochAllocations',
  epochBudgets: 'epochBudgets',
  epochInfo: 'epochInfo',
  epochLeverage: 'epochLeverage',
  epochPatrons: 'epochPatrons',
  epochTimestampHappenedIn: 'epochTimestampHappenedIn',
  epochUnusedRewards: 'epochUnusedRewards',
  epochesEndTime: 'epochesEndTime',
  estimatedEffectiveDeposit: 'estimatedEffectiveDeposit',
  individualReward: 'individualReward',
  karmaGapMilestonesPerProjectPerGrantPerProgram: 'karmaGapMilestonesPerProjectPerGrantPerProgram',
  matchedProjectRewards: 'matchedProjectRewards',
  patronMode: 'patronMode',
  projectRewardsThreshold: 'projectRewardsThreshold',
  projectsDonors: 'projectsDonors',
  projectsEpoch: 'projectsEpoch',
  projectsIpfsResults: 'projectsIpfsResults',
  rewardsRate: 'rewardsRate',
  searchResultsDetails: 'searchResultsDetails',
  upcomingBudget: 'upcomingBudget',
  uqScore: 'uqScore',
  userAllocationNonce: 'userAllocationNonce',
  userAllocations: 'userAllocations',
  userTOS: 'userTOS',
};

export const QUERY_KEYS: QueryKeys = {
  antisybilStatus: userAddress => [ROOTS.antisybilStatus, userAddress],
  blockNumber: ['blockNumber'],
  calculateRewards: (amount, days) => [ROOTS.calculateRewards, amount, days.toString()],
  cryptoValues: fiatCurrency => [ROOTS.cryptoValues, fiatCurrency],
  currentEpoch: ['currentEpoch'],
  currentEpochEnd: ['currentEpochEnd'],
  currentEpochProps: ['currentEpochProps'],
  depositsValue: ['depositsValue'],
  epochAllocations: epoch => [ROOTS.epochAllocations, epoch.toString()],
  epochBudgets: epoch => [ROOTS.epochBudgets, epoch.toString()],
  epochInfo: epoch => [ROOTS.epochInfo, epoch.toString()],
  epochLeverage: epoch => [ROOTS.epochLeverage, epoch.toString()],
  epochPatrons: epoch => [ROOTS.epochPatrons, epoch.toString()],
  epochTimestampHappenedIn: timestamp => [ROOTS.epochTimestampHappenedIn, timestamp.toString()],
  epochUnusedRewards: epoch => [ROOTS.epochUnusedRewards, epoch.toString()],
  epochesEndTime: epochNumber => [ROOTS.epochesEndTime, epochNumber.toString()],
  epochsIndexedBySubgraph: ['epochsIndexedBySubgraph'],
  estimatedEffectiveDeposit: userAddress => [ROOTS.estimatedEffectiveDeposit, userAddress],
  history: ['history'],
  individualProjectRewards: ['individualProjectRewards'],
  individualReward: epochNumber => [ROOTS.individualReward, epochNumber.toString()],
  isDecisionWindowOpen: ['isDecisionWindowOpen'],
  karmaGapMilestonesPerProjectPerGrantPerProgram: (selectedProgramIds, projectAddress) => [
    ROOTS.karmaGapMilestonesPerProjectPerGrantPerProgram,
    selectedProgramIds,
    projectAddress,
  ],
  largestLockedAmount: ['largestLockedAmount'],
  lockedSummaryLatest: ['lockedSummaryLatest'],
  lockedSummarySnapshots: ['lockedSummarySnapshots'],
  matchedProjectRewards: epochNumber => [ROOTS.matchedProjectRewards, epochNumber.toString()],
  patronMode: userAddress => [ROOTS.patronMode, userAddress],
  projectRewardsThreshold: epochNumber => [ROOTS.projectRewardsThreshold, epochNumber.toString()],
  projectsDonors: epochNumber => [ROOTS.projectsDonors, epochNumber.toString()],
  projectsEpoch: epochNumber => [ROOTS.projectsEpoch, epochNumber.toString()],
  projectsIpfsResults: (projectAddress, epochNumber) => [
    ROOTS.projectsIpfsResults,
    projectAddress,
    epochNumber.toString(),
  ],
  projectsMetadataAccumulateds: ['projectsMetadataAccumulateds'],
  projectsMetadataPerEpoches: ['projectsMetadataPerEpoches'],
  rewardsRate: epochNumber => [ROOTS.rewardsRate, epochNumber.toString()],
  searchResults: ['searchResults'],
  searchResultsDetails: (address, epoch) => [ROOTS.searchResultsDetails, address, epoch.toString()],
  syncStatus: ['syncStatus'],
  totalAddresses: ['totalAddresses'],
  totalWithdrawals: ['totalWithdrawals'],
  unlocks: ['unlocks'],
  upcomingBudget: userAddress => [ROOTS.upcomingBudget, userAddress],
  uqScore: epoch => [ROOTS.uqScore, epoch.toString()],
  userAllocationNonce: userAddress => [ROOTS.userAllocationNonce, userAddress],
  userAllocations: epochNumber => [ROOTS.userAllocations, epochNumber.toString()],
  userTOS: userAddress => [ROOTS.userTOS, userAddress],
  vimeoVideos: ['vimeoVideos'],
  withdrawals: ['withdrawals'],
};
